<!DOCTYPE html>
<html>
    <head>
        <title>
            Mentor Dashboard
        </title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" >
        <style>
            body {
                background-color: #f8f9fa;
                font-family: sans-serif;
                padding: 20px;
            }

            .dashboard-container {
                max-width: 1000px;
                margin: 40px auto;
                background-color: #ffffff;
                border-radius: 10px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                padding: 30px;
            }

            .table-responsive {
                margin-top: 30px;
            }

            .table th, .table td {
                vertical-align: middle;
            }

            .logout-btn-container {
                text-align: right;
                margin-bottom: 20px;
            }

            .availability-form {
                margin-top: 40px;
                padding: 20px;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                background-color: #fdfdfd;
            }
        </style>
    </head>
    <body>
        <div class="dashboard-container">
            <div class="logout-btn-container">
                <a href="/logout" class="btn btn-outline-danger">Logout</a>
            </div>

            <h1 class="mb-3">Mentor Dashboard</h1>
            <p class="lead">Welcome, {{mentor.fullname}}!</p>
            <p class="text-muted">Here are your upcoming and past booked sessions.</p>

            <!-- DEBUGGING LINE: Chech if sessions array is recognized -->
            <p>Total sessions found (debug): {{sessions.length}}</p>
            {{#if sessions}}
                <p>First session mentee (debug): {{sessions.[0].mentee_fullname}}</p>
            {{/if}}

            <h2 class="mt-5 mb-3">Your Booked Sessions</h2>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Mentee Name</th>
                            <th>Mentee Email</th>
                            <th>Start Time</th>
                            <th>End Time</th>
                            <th>Feedback</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each sessions}}
                        <tr>
                            <td>{{this.mentee_fullname}}</td>
                            <td>{{this.mentee_email}}</td>
                            <td>{{this.start_time}}</td>
                            <td>{{this.end_time}}</td>
                            <td>{{this.feedback}}</td>
                            <td><span class="badge bg-primary">{{this.session_status}}</span></td>
                        </tr>
                        {{else}}
                        <tr>
                            <td colspan="6" class="text-center text-muted py-4">No sessions booked yet.</td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <hr class="my-5">

            <h2 class="mt-5 mb-3">Manage Your Availability</h2>
            <div class="availability-form">
                <h3 class="mb-3">Add New Availability Slot</h3>
                <form id="add-availability-form">
                    <div class="mb-3">
                        <label for="start_time_avail" class="form-label">Start Time:</label>
                        <input type="datetime-local" class="form-control" id="start_time_avail" required>
                    </div>
                    <div class="mb-3">
                        <label for="end_time_avail" class="form-label">End Time:</label>
                        <input type="datetime-local" class="form-control" id="end_time_avail" required>
                    </div>
                    <button type="submit" class="btn btn-success">Add Availability </button>
                </form>
                <div id="availability-message" class="mt-3"></div>
            </div>

            <h3 class="mt-5 mb-3">Current Availability Slots</h3>
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>Start Time</th>
                            <th>End Time</th>
                            <th>Booked?</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="availability-slots-table-body">
                        <!-- Availability slots will be loaded here by JavaScript -->
                        <tr>
                            <td colspan="4" class="text-center text-muted py-4">Loading availability...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <script>
            document.addEventListener("DOMContentLoaded", () => {
                const addAvailabilityForm = document.getElementById("add-availability-form");
                const availabilityMessageDiv = document.getElementById("availability-message");
                const availabilityTableBody = document.getElementById("availability-slots-table-body");

                // Helper to format dates for display
                function formatDateTimeForDisplay(isoString) {
                    if(!isoString) return '';
                    const date = new Date(isoString);
                    // Format as "YYYY-MM-DD HH:MM AM/PM"
                    return date.toLocaleString('en-US', {
                        year: 'numeric',
                        month: 'numeric',
                        day: 'numeric',
                        hour: 'numeric',
                        minute: 'numeric',
                        hour12: true
                    });
                }

                // Function to fetch and render availability slots
                async function fetchAndRenderAvailability() {
                    availabilityTableBody.innerHTML = '<tr><td colspan="4" class="text-center text-muted py-4">Loading availability...</td></tr>';
                    try {
                        const response = await fetch('/api/mentor/availability');
                        if (!response.ok) {
                            throw new Error('Failed to fetch availability');
                        }
                        const data = await response.json();

                        availabilityTableBody.innerHTML = '';  // Clear loading message

                        if (data.availability && data.availability.length > 0) {
                            data.availability.forEach(slot => {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                                <td>${formatDateTimeForDisplay(slot.start_time)}</td>
                                <td>${formatDateTimeForDisplay(slot.end_time)}</td>
                                <td><span class="badge bg-${slot.is_booked ? 'danger' : 'success'}">${slot.is_booked ? 'Yes' : 'No'}</span></td>
                                <td>
                                    <button class="btn btn-sm btn-danger delete-availability-btn" data-id="${slot.id}" ${slot.is_booked ? 'disabled' : ''}>Delete</button>
                                </td>
                            `;
                            availabilityTableBody.appendChild(row);
                            console.log("Frontend: Appended row for slot ID:", slot.id);
                            });

                            // Attach event listeners to new delete buttons
                            document.querySelectorAll('.delete-availability-btn').forEach(button => {
                                button.addEventListener('click', handleDeleteAvailability);
                            });

                        } else {
                            availabilityTableBody.innerHTML = '<tr><td colspan="4" class="text-center text-muted py-4">No availability slots added yet.</td></tr>';
                        }
                    } catch (error) {
                        console.error("Error fetching availability:", error);
                        availabilityTableBody.innerHTML = `<tr><td colspan="4" class="text-center text-danger py-4">Error loading availability: ${error.message}</td></tr>`;

                    }
                     
                }

                // Handle adding new availability
                addAvailabilityForm.addEventListener("submit", async (e) => {
                    e.preventDefault();
                    availabilityMessageDiv.textContent = '';
                    availabilityMessageDiv.style.color = 'black';

                    const startTime = document.getElementById("start_time_avail").value;
                    const endTime = document.getElementById("end_time_avail").value;

                // --- DEBUGGING START ---
                    console.log("Frontend: Submitting availability data:");
                    console.log("  Start Time (raw from input):", startTime);
                    console.log("  End Time (raw from input):", endTime);
                // --- DEBUGGING END ---


                    try {
                        const response = await fetch('/api/mentor/availability', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ start_time: startTime, end_time: endTime })
                        });

                        const data = await response.json();

                        if (response.ok) {
                            availabilityMessageDiv.textContent = data.message;
                            availabilityMessageDiv.style.color = 'green';
                            addAvailabilityForm.reset(); // Clear form
                            fetchAndRenderAvailability(); // Refresh the list
                        } else {
                            throw new Error(data.error || 'Failed to add availability');
                        }
                    } catch (error) {
                        console.error("Error adding availability:", error);
                        availabilityMessageDiv.textContent = `Error: ${error.message}`;
                        availabilityMessageDiv.style.color = 'red';
                    }
                });

                // Handle deleting availability
                async function handleDeleteAvailability(event) {
                    const slotId = event.target.dataset.id;
                    if (!confirm('Are you sure you want to delete this availability slot?')) {
                        return; // User cancelled
                    }

                    try {
                        const response = await fetch(`/api/mentor/availability/${slotId}`, {
                            method: 'DELETE'
                        });

                        const data = await response.json();

                        if (response.ok) {
                            availabilityMessageDiv.textContent = data.message;
                            availabilityMessageDiv.style.color = 'green';
                            fetchAndRenderAvailability(); // Refresh the list
                        } else {
                            throw new Error(data.message || 'Failed to delete availability');
                        }
                    } catch (error) {
                        console.error("Error deleting availability:", error);
                        availabilityMessageDiv.textContent = `Error: ${error.message}`;
                        availabilityMessageDiv.style.color = 'red';
                    }
                }

                // Initial fetch of availability when the page loads
                fetchAndRenderAvailability();
            


            });
    </script>
</body>
</html> 